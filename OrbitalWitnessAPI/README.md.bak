# Schedule Lease Notice Microservice

# Description 
This project consists of a microservice project called the Schedule Lease Notice Service.
It's job is to provide easy access and organised access to schedule lease notice data, which it consumes from another serice in form of raw schedule lease data.

The solution contains the following projects (excluding unit test projects):
* OrbitalWitnessAPI, containing the microservice api controller, interaces and concrete implementation of these interface classes
* OrbitalWitness.Tests, containing the unit tests

# Run Instructions

## Requirements
The project was implemented with .NET 6. 
Please ensure you .NET 6 SDK installed on your machine.  

## To run with VSStudio
1. Open the OrbitalWitnessAPI.sln, this should load the required projects.
1. If not already set, you will be required to set the startup projects, this is done by right clicking on the solution name in the solution explorer. You in the context dialog, select "Set Startup Projects...". Under startup project, select Multiple startup projects, then select OrbitalWitnessAPI and set the Action to Start and do the same for EyeExamApi, hit ok. It is essential that the EyeExamApi is running alongside the OrbitalWitnessAPI.
1. Hit the Debug. 
1. When the services start they will load in your default browser and you should see swagger pages for both EyeExamApi and OrbitalWitnessAPI. 
1. You can test the OrbitalWitnessAPI by clicking on the Lease API Get button, this will load the data for schedule lease notices.

## Auth
The API uses Basic auth and the credentials can be find the in the appSettings json.

## Unit tests
All unit tests were implemented with the help of the xUnit testing framework and Fluent Assertions.


# Things to observe
## Consistent standards
This code uses consistent standards, this can be observed in things such as class private memeber variables are all denoted with underscore for example.
Most classes have an interace, in order to accomodate dependency injection.

## SOLID Principles
All throughout the application SOLID principles are followed, for example the ScheduleParser - has a single responsibility.
All the interfaces implemented do not enforce unwanted methods to a class.
The code is kept clean and testable through the use of dependency injection.

The SingletonOperationCache is a loss form of a singleton responsible for handling the caching of data within the service, this is done by adding/registering it as a singleton service.

## Accurate Result Set and Test Coverage
The unit testing demonstrates the accuracy of the parser and the test coverage.

## Extras Points
Extra points are available for
* Algorithm extensibility for future cases
* External visiblity and live diagnostics (think: logging, telemetry etc)
* Consideration of hosting + deployment (Docker, Serverless etc) 
* Write up of next steps to get the solution to production
* _anything else you think is relevant, get creative_ 

## Future
Things that could had been considered for future development include the following:-
1. Authentication - this should be implemented in order to access the schedule lease notice data
2. Secrets - both the EyeExamApi and OrbitalWitnessAPI should adopt secrets in order to manage and hide sensitive login details within the appsettings.json
3. Extension of API - the current implementation only

##Production


## Time
We expect this to take no more than two hours to cover the core competencies above, if you decide to spend more time to show off or hit some bonus points you're more than welcome to!

If you find yourself running out of time prior to completing the entire problem, we will also review partial submissions paired with a write up of what your next steps would have been.

# Submission
Submit your result via your medium of choice (zip archive / git repo) to the recruiter or contact at Orbital Witness, and we'll be in touch with the results! 
